[
  {
    "label": "Hello World",
    "code": [
      "# Print to display, if available",
      "Print(\"Hello World\")",
      "# Print to output window",
      "Log(\"Hello World\")"
    ]
  },
  {
    "label": "Blink LED",
    "code": [
      "@Loop",
      "  DWrite(108, 1) : Wait(250)",
      "  DWrite(108, 0) : Wait(250)",
      "Goto Loop"
    ]
  },
  {
    "label": "Fade LED",
    "code": [
      "@Loop",
      "  For i=0 to 100 Step 10",
      "    AWrite('L', i)",
      "    Wait(100)",
      "  Next",
      "  For i=100 to 0 Step -10",
      "    AWrite('L', i)",
      "    Wait(100)",
      "  Next",
      "Goto Loop"
    ]
  },
  {
    "label": "Read Buttons",
    "code": [
      "BtnEnable('A', 1)",
      "BtnEnable('B', 1)",
      "@Loop",
      "  a=BtnDown('A')",
      "  b=BtnDown('B')",
      "  If a=1",
      "    PrintLn(\"Button A\")",
      "    LogLn(\"Button A\")",
      "  End",
      "  If b=1",
      "    PrintLn(\"Button B\")",
      "    LogLn(\"Button B\")",
      "  End",
      "  Wait(200)",
      "Goto Loop"
    ]
  },
  {
    "label": "Image Arrays",
    "code": [
      "Dim i[2+(8*8)] = [8,8,",
      "0, 0, 0, 1, 1, 0, 0, 0,",
      "0, 0, 1, 1, 1, 1, 0, 0,",
      "0, 1, 1, 1, 1, 1, 1, 0,",
      "1, 1, 0, 1, 1, 0, 1, 1,",
      "1, 1, 1, 1, 1, 1, 1, 1,",
      "0, 0, 1, 0, 0, 1, 0, 0,",
      "0, 1, 0, 1, 1, 0, 1, 0,",
      "1, 0, 1, 0, 0, 1, 0, 1]",
      "LcdClear(0)",
      "LcdImgS(i,50,30,3,3,0)",
      "LcdShow()"
    ]
  },
  {
    "label": "Display Graphics",
    "code": [
      "Dim i[2+(8*8)] = [8,8,",
      "0, 0, 0, 1, 1, 0, 0, 0,",
      "0, 0, 1, 1, 1, 1, 0, 0,",
      "0, 1, 1, 1, 1, 1, 1, 0,",
      "1, 1, 0, 1, 1, 0, 1, 1,",
      "1, 1, 1, 1, 1, 1, 1, 1,",
      "0, 0, 1, 0, 0, 1, 0, 0,",
      "0, 1, 0, 1, 1, 0, 1, 0,",
      "1, 0, 1, 0, 0, 1, 0, 1]",
      "LcdClear(0)",
      "LcdLine(1, 0, 10, 125, 10)",
      "LcdRect(1, 0, 0, 125, 60)",
      "LcdPixel(1, 64, 5)",
      "LcdCircle(1, 20, 30, 14)",
      "LcdFill(1, 95, 20, 20, 20)",
      "LcdTextS(\"DUE\",1,48, 23, 2, 2)",
      "LcdText(\"is Awesome\", 1, 35,45)",
      "LcdImgS(i, 13, 22, 2, 2, 0)",
      "LcdShow()"
    ]
  },
  {
    "label": "Cap Touch Sense",
    "code": [
      "# This sample reads pin 0 as a capacitive touch.",
      "# Touch with your finger to detect",
      "# BrainPad already has the required R/C",
      "# Other pins need R/C to work",
      "# See https://duelink.com/software/due-script/corelib/touch.html",
      "@Loop",
      "  a=TouchRead(0)",
      "  If a>0:PrintLn(\"pin 0\"):LogLn(\"pin 0\"):End",
      "  Wait(100)",
      "Goto Loop"
    ]
  },
  {
    "label": "Touch Screen",
    "code": [
      "# This sample reads the x & y position on a touch screen.",
      "# Touch screen with finger to read",
      "@Loop",
      "  x = TouchRead('x')",
      "  y = TouchRead('y')",
      "  LogLn(x)",
      "  LogLn(y)",
      "  Wait(100)",
      "Goto Loop"
    ]
  },
  {
    "label": "For Loop",
    "code": [
      "For i=0 to 10",
      "  PrintLn(i)",
      "  LogLn(i)",
      "Next"
    ]
  },
  {
    "label": "If Statement",
    "code": [
      "If x=1",
      "  PrintLn(\"one\")",
      "  LogLn(\"one\")",
      "Else",
      "  PrintLn(\"not one\")",
      "  LogLn(\"not one\")",
      "End"
    ]
  },
  {
    "label": "Subroutine",
    "code": [
      "@Go",
      "  Print(\"I am going!\")",
      "  Log(\"I am going!\")",
      "Return",
      "# You can now execute Go() from the code",
      "# And also can execute it from immediate mode",
      "# Enter Go() in the immediate window"
    ]
  },

  {
    "label": "BrainPad Pulse",
    "code": [
      "# BrainPad Pulse - LCD Bouncing ball",
      "x=64 # Ball X location",
      "y=32 # Ball Y location",
      "r=5  # Ball radius",
      "a=3  # Ball X Speed",
      "b=2  # Ball Y Speed",
      "@Loop",
      "  LCDClear(0)        # Clear the screen",
      "  LCDCircle(1,x,y,r) # Draw the ball",
      "  LCDShow()          # Update the screen",
      "  x=x+a:y=y+b        # Move the ball",
      "  # Check if the ball hit one of the edges",
      "  # If it did, then reverse the direction and make a sound",
      "  If x<r || x>=(128-r):a=-a:freq('p',500,16,100):End",
      "  If y<r || y>=(64-r):b=-b:freq('p',2000,16,100):End",
      "Goto Loop"
    ]
  },
  {
    "label": "DUE Cheat Sheet",
    "code": [
      "#################################################################",
      "#    This is a list of all the available internal functions     #",
      "# Visit duelink.com for a complete description and code samples #",
      "#################################################################",
      "# ",
      "# AWrite(pin, dutyCycle)",
      "#   pin: pin number - dutyCycle: 0 to 100",
      "# ARead(pin)",
      "#   pin: pin number - Returns: 0 to 100",
      "# Beep(pin,frequency, duration)",
      "#   pin: pin number or 'p' - frequency: Hz max 10KHz - duration: milliseconds",
      "# BtnEnable(pin, enable)",
      "#   pin: pin number, 'a' or 'b' - enable: 1 = enable 0 = disabled",
      "# BtnUp(pin)",
      "#   pin: pin number, 'a' or 'b' - Returns: 1 after release first time called. 0 if called again",
      "# BtnDown(pin)",
      "#   pin: pin number, 'a' or 'b' - Returns: 1 if button is pressed",
      "# Cos(number) ",
      "#   Returns: cosine of argument",
      "# DRead(pin, pull)",
      "#   pin: pin number - pull: 0 = none, 1 = up, 2 = down - Returns: 1 = high or 0 = low",
      "# DWrite(pin, state)",
      "#   pin: pin number - state: 1 = high or 0 = low",
      "# Echo(enable)",
      "#   enable: 0 = enable or 1 = disable",
      "# Fmt()",
      "#   Formats multiple arguments into a single string",
      "# Freq(pin, frequency, duration, dutyCycle)",
      "#   pin: hardware specific pin number - frequency: in KHz - duration: 0 to forever - dutyCycle: 0 to 100",
      "# GetCh()",
      "#   Returns: character input in ASCII format, -1 = no character",
      "# GetNum()",
      "#   Reads number input, can be used with IsNAN()",
      "# Humidity(pin, type)",
      "#   pin: pin number - type: DHT11 = 11, DHT12 = 12, DHT22 = 22, DHT21 = 21 - Returns: Humidity 0 to 100",
      "# I2cBytes(address, arrayWrite, writeCount, arrayRead, readCount)",
      "#   address: I2C slave address - arrayWrite: array to send, writeCount: number of bytes to write, arrayRead: array to read,readCount: Number bytes to read",
      "# IrEnable(enable)",
      "#   enable: 1 = enable or 0 = disable",
      "# IrRead()",
      "#   Returns: key press value 0 to 24",
      "# LcdClear(color)",
      "#   color: 0 = black 1= white or any color value",
      "# LcdCircle(color, x, y, radius)",
      "#   color: 0 = black or 1 = white - x: x circle center value - y: y circle center - radius: radius of circle",
      "# LcdConfig(output, address)",
      "#   output: 0 = none, 1 = console, 2 = LCD and console - address: I2C address, 0 = default BrainPad Pulse",
      "# LcdFill(color, x, y, width, height)",
      "#   color: 0 = black or 1 = white - x: starting x point - y: starting y point - width: rectangle width - height: rectangle height",
      "# LcdImg(array, x, y, transform)",
      "#   array: image array - x: x position - y: y position - transform: 0 = none, 1 = flip horz, 2 = flip vert, 3 = 90 deg, 4 = 180 deg, 5 = 270 deg",
      "# LcdImgS(array, x, y, transform, scaleWidth, scaleHeight)",
      "#   same as LcdImg() adds scale",
      "# LcdLine(color, x1, y1, x2, y2)",
      "#   color: 0 = black or 1 = white or any color value- x1: starting x point - y1: starting y point - x2: ending x point - y2: ending y point",
      "# LcdPixel(color, x, y)",
      "#   color: 0 = black or 1 = white - x: x pixel value - y: y pixel value",
      "# LcdRect(color, x, y, width, height)",
      "#   color: 0 = black or 1 = white or any color value- x: starting x point - y: starting y point - width: rectangle width - height: rectangle height",
      "# LcdText(\"text\", color, x, y)",
      "#   text: string message in quotes, use Str() to convert variable - color: 0 = black or 1 = white - x: x position - y: y position",
      "# LcdTextT(\"text\", color, x, y)",
      "#   displays tiny 5px text: , use Str() to convert variable - color: 0 = black or 1 = white - x: x position - y: y position",
      "# LcdTextS(\"text\", color, x, y, scaleWidth, scaleHeight)",
      "#   same as LcdText() adds scale",
      "# LcdShow()",
      "#   sends the display buffer to the LCD",
      "# Log()",
      "#   sends content to the output on the same line",
      "# LogLn()",
      "#   sends content to the output on a new line",
      "# LED(high, low, count)",
      "#   high: duration on in milliseconds, low: duration off in milliseconds, count: number of times to blink",
      "# NeoClear()",
      "#   clears all LEDS in memory needs NeoShow()",
      "# NeoSet(index, red, green, blue)",
      "#   index: led from 0 to 255, red, green blue: color levels 0 to 255",
      "# NeoShow(pin, count)",
      "#   pin: pin number - count: number of LEDs to update",
      "# Print(\"text\" or variable)",
      "#   returns the value of it's argument",
      "# PrintLn(\"text\" or variable)",
      "#   Returns the value of it's argument with line breaks",
      "# ReadDistance(trigger, echo)",
      "#   trigger: pin number of trigger - echo: pin number of echo, -1 for single pin - Returns: distance in centimeters",
      "# Reset(loader)",
      "#   loader: 0 = system reset, 1 = reset to loader mode",
      "# Rnd(max)",
      "#   max: maximum value of random number - Returns: random number between 0 and max",
      "# ServoSet(pin, degree)",
      "#   pin: pin number - degree: 0 to 180",
      "# Sin(number)",
      "#   Returns the sine value of it's argument",
      "# SpiByte(byte) ",
      "#   byte: 0 to 255 - Returns: Read byte value",
      "# SpiCfg(mode, frequency)",
      "#   mode: 0 to 3 - frequency: 200 to 20000 (200KHz to 20MHz)",
      "# Sqrt(number)",
      "#   Returns the square root value of it's argument",
      "# Str(number)",
      "#   Returns number as string when need in arguments",
      "# Tan(number) ",
      "#   Returns the tangent of it's argument",
      "# Temp(pin, type)",
      "#   pin: pin number - type: DHT11 = 11, DHT12 = 12, DHT22 = 22, DHT21 = 21 - Returns: Temperature in Celsius",
      "# TickMs()",
      "#   Read system ticks in milliseconds",
      "# TickUs()",
      "#   Read system ticks in microseconds",
      "# TouchRead(pin) ",
      "#   pin: pin number, 'x' or 'y'",
      "#   Pin Returns: 0 = pin not touched or pin 1 = touched ",
      "#   Touch Screen Returns: -1 = not touched or x and y position",
      "# Trunc(number)",
      "#   Returns the truncated value of it's argument",
      "# Version",
      "#   Returns firmware and device versions",
      "# Wait(duration)",
      "#   duration: in milliseconds"
    ]
  },
  {
    "label": "More Samples",
    "url": "https://duelink.com/software/due-script/samples/samples.html"
  }
]
